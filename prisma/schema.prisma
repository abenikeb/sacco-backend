generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  id             Int             @id @default(autoincrement())
  memberNumber   Int             @unique
  etNumber       Int             @unique
  name           String
  email          String?         
  phone          String?         
  division       String?
  department     String?
  section        String?
  group          String?
  withdrawalRequests       WithdrawalRequest[]
  transactions   Transaction[]
  savings        Savings[]
  loans          Loan[]
  salary         Int              @default(0)   
  history        MemberHistory[]
  balance        MemberBalance?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  user           User?           @relation(fields: [userId], references: [id])
  userId         Int?            @unique

  @@index([name])
  @@index([division])
  @@index([department])
  @@index([section])
  @@index([group])
}

model MemberHistory {
  id            Int      @id @default(autoincrement())
  memberId      Int
  changeDate    DateTime @default(now())
  effectiveDate DateTime
  fieldName     String
  oldValue      String?
  newValue      String?
  member        Member   @relation(fields: [memberId], references: [id])
}

model MembershipRequest {
  id         Int      @id @default(autoincrement())
  name       String
  email      String
  phone      String
  department String
  etNumber   Int @unique
  approvalOrder Int @default(0)
  salary         Int              @default(0) 
  signature  String 
  national_id String 
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model MemberBalance {
  id                  Int      @id @default(autoincrement())
  memberId            Int      @unique
  totalSavings        Decimal  @default(0.00)
  totalContributions  Decimal  @default(0.00)
  costOfShare         Decimal  @default(0.00)
  registrationFee     Decimal  @default(0.00)
  membershipFee       Decimal  @default(0.00)
  willingDeposit      Decimal  @default(0.00)
  member              Member   @relation(fields: [memberId], references: [id])
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Savings {
  id          Int      @id @default(autoincrement())
  memberId    Int
  amount      Decimal
  savingsDate DateTime @default(now())
  member      Member   @relation(fields: [memberId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Transaction {
  id              Int             @id @default(autoincrement())
  memberId        Int
  type            TransactionType
  journalEntries  JournalEntry[] 
  amount          Decimal
  reference       String?
  transactionDate DateTime        @default(now())
  member          Member          @relation(fields: [memberId], references: [id])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([memberId, transactionDate])
  @@index([type, transactionDate])
}

model LoanProduct {
  id                          Int      @id @default(autoincrement())
  name                        String   @unique
  description                 String?
  interestRate                Decimal  @default(9.5)
  minDurationMonths           Int      @default(1)
  maxDurationMonths           Int      @default(120)
  requiredSavingsPercentage   Decimal  @default(30) // 30% of loan amount
  requiredSavingsDuringLoan   Decimal  @default(35) // 35% of monthly income
  maxLoanBasedOnSalaryMonths  Int      @default(30) // 30 months of salary
  minTotalContributions       Decimal  @default(0) // Minimum total contributions required to qualify for this product
  isActive                    Boolean  @default(true)
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  loans                       Loan[]

  @@index([isActive])
  @@index([minTotalContributions]) // Index for efficient product lookup by contributions
}

model Loan {
  id                Int               @id @default(autoincrement())
  memberId          Int
  loanProductId     Int               // Add reference to LoanProduct
  amount            Decimal
  remainingAmount   Decimal?
  order             Int               @default(0)
  interestRate      Decimal
  tenureMonths      Int
  status            LoanApprovalStatus
  approvalLogs      LoanApprovalLog[]
  loanRepayments    LoanRepayment[]
  loanDocuments     LoanDocument[]
  member            Member            @relation(fields: [memberId], references: [id])
  loanProduct       LoanProduct       @relation(fields: [loanProductId], references: [id]) // Add relation
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

enum WithdrawalApprovalStatus {
  PENDING
  APPROVED_BY_ACCOUNTANT
  APPROVED_BY_SUPERVISOR
  APPROVED_BY_MANAGER
  REJECTED
  DISBURSED
}

model WithdrawalRequest {
  id                    Int                       @id @default(autoincrement())
  memberId              Int
  amount                Decimal
  requestedAmount       Decimal                   // Original requested amount
  approvalStatus        WithdrawalApprovalStatus  @default(PENDING)
  approvalLogs          WithdrawalApprovalLog[]
  member                Member                    @relation(fields: [memberId], references: [id])
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt

  @@index([memberId])
  @@index([approvalStatus])
  @@index([createdAt])
}

model WithdrawalApprovalLog {
  id                    Int                       @id @default(autoincrement())
  withdrawalRequestId   Int
  approvedByUserId      Int
  approvalLevel         String                    // ACCOUNTANT, SUPERVISOR, MANAGER
  status                WithdrawalApprovalStatus
  remarks               String?
  withdrawalRequest     WithdrawalRequest         @relation(fields: [withdrawalRequestId], references: [id], onDelete: Cascade)
  approvedByUser        User                      @relation(fields: [approvedByUserId], references: [id])
  createdAt             DateTime                  @default(now())

  @@index([withdrawalRequestId])
  @@index([approvedByUserId])
}

model LoanRepayment {
  id            Int                 @id @default(autoincrement())
  loanId        Int
  amount        Decimal             // scheduled repayment
  paidAmount    Decimal             @default(0) // total paid toward this scheduled repayment
  repaymentDate DateTime            @default(now())
  reference     String?
  sourceType    RepaymentSourceType
  status        RepaymentStatus     @default(PENDING)
  loan          Loan                @relation(fields: [loanId], references: [id])
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}

model LoanApprovalLog {
  id               Int                @id @default(autoincrement())
  loanId           Int
  approvedByUserId Int
  role             UserRole
  status           LoanApprovalStatus
  comments         String?
  approvalDate     DateTime           @default(now())
  approvalOrder    Int                @default(0)
  loan             Loan               @relation(fields: [loanId], references: [id])
  user             User               @relation(fields: [approvedByUserId], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  committeeApproval Int               @default(0)
}

model LoanDocument {
  id               Int      @id @default(autoincrement())
  loanId           Int
  uploadedByUserId Int
  documentType     DocumentType
  documentContent  Bytes
  fileName         String
  mimeType         String
  documentUrl      String   // Add this line
  uploadDate       DateTime @default(now())
  loan             Loan     @relation(fields: [loanId], references: [id])
  user             User     @relation(fields: [uploadedByUserId], references: [id])
}

model User {
  id              Int               @id @default(autoincrement())
  name            String
  email           String            @unique
  phone           String            @unique
  password        String

  role            UserRole          @default(MEMBER) // Keep for backward compatibility
  roleId          Int?              // New dynamic role reference
  userRole        Role?             @relation(fields: [roleId], references: [id])
  member          Member?
  loanApprovals   LoanApprovalLog[]
  uploadedDocs    LoanDocument[]
  withdrawalApprovals     WithdrawalApprovalLog[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  Notification Notification[]
}

enum UserRole {
  MEMBER
  ACCOUNTANT
  MANAGER
  SUPERVISOR
  COMMITTEE
}

enum TransactionType {
  SAVINGS
  MEMBERSHIP_FEE
  REGISTRATION_FEE
  COST_OF_SHARE
  LOAN_REPAYMENT
  PURCHASE
  WILLING_DEPOSIT
}

enum LoanApprovalStatus {

  APPROVED     //this status will be shown to the user the other approve_by are for the heirarchial approval
  DISBURSED
  REPAID
  REJECTED
  PENDING
}



enum RepaymentSourceType {
  ERP_PAYROLL
  MANUAL_PAYMENT
  BANK_TRANSFER
}

enum DocumentType {
  AGREEMENT
  COLLATERAL
  OTHER
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  type      NotificationType
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

enum NotificationType {
  LOAN_APPLICATION_SUBMITTED
  LOAN_STATUS_UPDATE
  LOAN_DISBURSEMENT_READY
  LOAN_REPAYMENT_DUE
  LOAN_REPAYMENT_RECEIVED
  SAVINGS_UPDATE
  ACCOUNT_UPDATE
  WITHDRAWAL_APPROVAL
  WITHDRAWAL_APPROVED
  WITHDRAWAL_REQUEST
  GENERAL
}

enum RepaymentStatus {
  PENDING
  PAID
  OVERDUE
}

//chart of accounts
model ChartOfAccounts {
  id              Int      @id @default(autoincrement())
  code            String   @unique // e.g., "1001", "2001"
  name            String   // e.g., "Cash", "Bank Account"
  accountType     AccountType
  description     String?
  isActive        Boolean  @default(true)
  parentAccountId Int?
  parentAccount   ChartOfAccounts? @relation("ParentChild", fields: [parentAccountId], references: [id])
  childAccounts   ChartOfAccounts[] @relation("ParentChild")
  journalLines    JournalLine[]
  ledgerEntries   GeneralLedger[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([accountType])
  @@index([isActive])
}

model JournalEntry {
  id              Int      @id @default(autoincrement())
  journalId       Int      @default(3) // Default journal
  entryNumber     String   @unique // Auto-generated reference
  entryDate       DateTime
  description     String
  reference       String?  // Transaction reference
  transactionId   Int?     // Link to Transaction
  transaction     Transaction? @relation(fields: [transactionId], references: [id])
  totalDebit      Decimal  @default(0)
  totalCredit     Decimal  @default(0)
  isBalanced      Boolean  @default(false)
  status          JournalStatus @default(DRAFT)
  journalLines    JournalLine[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([entryDate])
  @@index([status])
  @@index([transactionId])
  GeneralLedger GeneralLedger[]
}

model JournalLine {
  id              Int      @id @default(autoincrement())
  journalEntryId  Int
  journalEntry    JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  accountId       Int
  account         ChartOfAccounts @relation(fields: [accountId], references: [id])
  debit           Decimal  @default(0)
  credit          Decimal  @default(0)
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([journalEntryId])
  @@index([accountId])
}

model GeneralLedger {
  id              Int      @id @default(autoincrement())
  accountId       Int
  account         ChartOfAccounts @relation(fields: [accountId], references: [id])
  journalEntryId  Int
  journalEntry    JournalEntry @relation(fields: [journalEntryId], references: [id])
  debit           Decimal  @default(0)
  credit          Decimal  @default(0)
  balance         Decimal  @default(0)
  transactionDate DateTime
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([accountId, transactionDate])
  @@index([journalEntryId])
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  INCOME
  REVENUE
  EXPENSE
}

enum JournalStatus {
  DRAFT
  POSTED
  REVERSED
}

//Permission
enum PermissionAction {
  VIEW
  READ
  CREATE
  UPDATE
  DELETE
  APPROVE
  REJECT
}

enum PermissionResource {
  MEMBERS
  LOANS
  SAVINGS
  TRANSACTIONS
  ACCOUNTING
  REPORTS
  USERS
  ROLES
  SETTINGS
  WITHDRAWALS
  LOAN_PRODUCTS
  AUDIT_LOGS
}

model Permission {
  id        Int                 @id @default(autoincrement())
  resource  PermissionResource
  action    PermissionAction
  description String?
  rolePermissions RolePermission[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@unique([resource, action])
  @@index([resource])
}

model Role {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  description String?
  isActive    Boolean           @default(true)
  permissions RolePermission[]
  users       User[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([isActive])
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

model SystemConfiguration {
  id                    Int       @id @default(autoincrement())
  organizationName      String    @default("Microfinance Institution")
  organizationLogo      String?   // URL to logo image
  currency              String    @default("ETB")
  fiscalYearStart       String    @default("01-01")
  maxLoanAmount         Decimal   @default(100000)
  minSavingsPercentage  Int       @default(30)
  interestCalculationMethod String @default("SIMPLE")
  loanApprovalLevels    String    @default("ACCOUNTANT,SUPERVISOR,MANAGER") // Comma-separated
  withdrawalApprovalLevels String @default("ACCOUNTANT,SUPERVISOR,MANAGER") // Comma-separated
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}